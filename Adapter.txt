1- Adapter: Usage examples: The Adapter pattern is pretty common in C# code. It’s very often used in 
systems based on some legacy code. In such cases, Adapters make legacy code work with modern classes.

Identification: Adapter is recognizable by a constructor which takes an instance of a different abstract/interface type.
When the adapter receives a call to any of its methods, it translates parameters to the appropriate format and then directs 
the call to one or several methods of the wrapped object.

Where To Apply Adapter Pattern?
1- You should consider using the Adapter Pattern whenever you want to use an existing class’s functionality, 
but its interface is not the one that you require.

2-Another scenario, if you’re trying to create reusable code, and you don’t want to tie it too tightly to a particular 
implementation, you should use some kind of an Adapter interface as what you’re code depends on, so that future clients
could implement their own version of that Adapter and still make use of your code.

3- You should remember the Open/Closed Principle, which states that modules should be open to extension but closed
to modification, and by utilizing the Adapter Pattern in your implementations of your code, you allow for your code to
better follow the Open/Closed Principle.


The classes, interfaces, and objects in the above UML class diagram are as follows:

ITarget
This is an interface which is used by the client to achieve its functionality/request.

Adapter
This is a class which implements the ITarget interface and inherits the Adaptee class.
It is responsible for communication between Client and Adaptee.

Adaptee
This is a class which has the functionality, required by the client. However, its interface is not
compatible with the client.

Client
This is a class which interacts with a type that implements the ITarget interface. However, the communication 
class called adaptee, is not compatible with the client


Who is what?
The classes, interfaces, and objects in the above class diagram can be identified as follows:

1- ITraget - Target interface
2-Employee Adapter- Adapter Class
3-HR System- Adaptee Class
4-ThirdPartyBillingSystem - Client


When to use it?
1-Allow a system to use classes of another system that is incompatible with it.
2-Allow communication between a new and already existing system which are independent of each other
3-Ado.Net SqlAdapter, OracleAdapter, MySqlAdapter are the best example of Adapter Pattern.