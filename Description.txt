1- ABSTRACT FACTORY: Provides an interface for creating families of relegated or dependent
objects without specifying their concrete classes. There are two types of Abstract Factories:
The simple Abstract Factory is an abstract class defining Factory methods to answer instances 
of concrete subclasses The second form of Abstract Factory is an abstract 
class defining a common protocol of Factory methods.

3- Factory Method: The Factory method takes care of one product whereas 
the abstractfactory pattern provides a way to encapsulate a family
of products. This pattern is used to create concrete class instances
without specifying the exact class type. We can say it is an Object creation
pattern also. Here objects are created without knowing the class
of the object. So basically the factory pattern is used wherever 
the sub classes are given the previledge of instantiating a method 
that can create an object.



4- PROTOTYPE: The prototype design pattern is a design pattern that is used to
instantiate a class by copying, or cloning, the properties of an existing object. 
The new object is an exact copy of the prototype but permits modification without altering
the original. This is a creational pattern as it is used to control class instantiation and
object generation. The pattern is used to instantiate a new object by copying all of
the properties of an existing object, creating an independent clone. This practise is particularly
useful when the construction of a brand new object, using the new operator, is inefficient